/////////////////////////////////////////////////
//              Chart definitions              //
/////////////////////////////////////////////////
define CHART_PARAMETERS = {"chart_title": ["More parameters", "3AB8E1", 24],
                           "chart_bar": [20, 30],
                           "chart_size": [600, 450],
                           "chart_scale": [0, 1000],
                           "chart_color": ["72BCD4"],
                           "chart_grid": [0, 10, 1, 1],
                           "chart_line": [4,3,0],
                           "chart_margin": [100, 100, 75, 100],
                           "chart_fill": [["c", "lg", 45, "white", 0, "EFEFEF", 0.75]["bg", "lg", 45, "EFEFEF", 0, "CDCDCD", 0.75]]
                           "axes_type": "xxyy",
                           "axes_label": [[1, "Time"], [3, "Value"]],
                           "axes_range": [2, 0, 1000, 250],
                           "axes_style": [[1, "3AB8E1", 14],[3, "3AB8E1", 14]]}

/////////////////////////////////////////////////
//                  Components                 //
/////////////////////////////////////////////////
component GetTimestamp() in -> out {
  timestamp : time.StrfTime(formating="%H:%M:%S")
  
  .in > timestamp.trigger
  timestamp.timestamp > .out
}


/////////////////////////////////////////////////
//              Actor definitions              //
/////////////////////////////////////////////////
bar_chart : chart.DynamicVBar(chart_param=CHART_PARAMETERS, dimension=8, left_to_right=false)
screen : media.ImageRenderer(width=600, height=450)
counter : std.CountTimer(sleep=1)
random : std.Random(minimum=500, maximum=800)
time : GetTimestamp()

/////////////////////////////////////////////////
//                  Main script                //
/////////////////////////////////////////////////
counter.integer > time.in
time.out > bar_chart.label

counter.integer > random.trigger
random.integer > bar_chart.value

bar_chart.img > screen.image
