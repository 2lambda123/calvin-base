define RED=false
define GREEN=true

component PortsToDict3() key_1, key_2, key_3, value_1, value_2, value_3 -> dict {
    keys : std.Alternate3()
    values : std.Alternate3()
    portdict : json.Dict(n=3)

    .key_1 > keys.token_1
    .key_2 > keys.token_2
    .key_3 > keys.token_3

    .value_1 > values.token_1
    .value_2 > values.token_2
    .value_3 > values.token_3

    keys.token > portdict.key
    values.token > portdict.value
    portdict.dict > .dict
}

component Alternate4() token_1, token_2, token_3, token_4 -> token {
    """ Alternating between three streams of tokens """

    main : std.Alternate()
    alt1 : std.Alternate()
    alt2 : std.Alternate()

    .token_1 > alt1.token_1
    .token_3 > alt1.token_2
    alt1.token > main.token_1
    .token_2 > alt2.token_1
    .token_4 > alt2.token_2
    alt2.token > main.token_2
    main.token > .token
}

component PortsToDict4() key_1, key_2, key_3, key_4, value_1, value_2, value_3, value_4 -> dict {
    keys : Alternate4()
    values : Alternate4()
    portdict : json.Dict(n=4)

    .key_1 > keys.token_1
    .key_2 > keys.token_2
    .key_3 > keys.token_3
    .key_4 > keys.token_4
    .value_1 > values.token_1
    .value_2 > values.token_2
    .value_3 > values.token_3
    .value_4 > values.token_4

    keys.token > portdict.key
    values.token > portdict.value
    portdict.dict > .dict
}

component HueURLBuilder() address, username, lightno -> url {
    format : text.Format(fmt="http://{address}/api/{username}/lights/{lightno}/state")
    fmt_dict : PortsToDict3()

    "address" > fmt_dict.key_1
    .address > fmt_dict.value_1
    "username" > fmt_dict.key_2
    .username > fmt_dict.value_2
    "lightno" > fmt_dict.key_3
    .lightno > fmt_dict.value_3
    fmt_dict.dict > format.dict
    format.text > .url
}

component HueCmdBuilder() on, sat, bri, hue -> type, string {
    cmd : PortsToDict4()
    to_str : json.ToString()

    "on" > cmd.key_1
    .on > cmd.value_1
    "sat" > cmd.key_2
    .sat > cmd.value_2
    "bri" > cmd.key_3
    .bri > cmd.value_3
    "hue" > cmd.key_4
    .hue > cmd.value_4
    cmd.dict > to_str.data
    to_str.string > .string
    {"Content-Type": "application/json"} > .type
}

component PhilipsHue() address, username, lightno, on, saturation, brightness, hue -> status {
    url : HueURLBuilder()
    command : HueCmdBuilder()
    light : net.HTTPPut()
    header: std.Terminator()
    body: std.Terminator()

    .address > url.address
    .username > url.username
    .lightno > url.lightno

    .on > command.on
    .saturation > command.sat
    .brightness > command.bri
    .hue > command.hue


    url.url > light.URL
    {} > light.params
    command.string > light.data
    command.type > light.header

    light.status > .status
    light.header > header.void
    light.data > body.void
}

component StopLight(address, username, lightno) state -> status {
    select: std.Deselect()
    light : PhilipsHue()

    address > light.address
    username > light.username
    lightno > light.lightno

    true > light.on
    255 > light.saturation
    100 > light.brightness
    .state > select.select

    1000 > select.case_false
    26000 > select.case_true
    select.data > light.hue
    light.status > .status

}

component FlashStopLight(interval) -> {
    light : StopLight(address="192.168.0.101", username="newdeveloper", lightno="1")
    on : std.Constantify(constant=true)
    off : std.Constantify(constant=false)
    alternate : std.Alternate()
    c_1 : std.Counter()
    c_2 : std.Counter()
    pacer : std.ClassicDelay(delay=interval)
    void : std.Terminator()

    c_1.integer > on.in
    c_2.integer > off.in
    on.out > alternate.token_1
    off.out > alternate.token_2
    alternate.token > pacer.token
    pacer.token > light.state
    light.status > void.void
}

flash : FlashStopLight(interval=2.0)

