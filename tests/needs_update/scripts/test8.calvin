// Nested components 1

component E() in -> out {
  f:std.Identity()
  g:std.Identity()

  .in > f.token
  f.token > g.token
  g.token > .out
}

component B() in -> out {
  d:std.Identity()
  e:E()

  .in > d.token
  d.token > e.in
  e.out > .out
}

a:std.Counter()
b:B()
c:test.Sink(store_tokens=false, active=true, quiet=false)

a.integer > b.in
b.out > c.token
